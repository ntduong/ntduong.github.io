<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Random Notes - Algorithm</title><link href="/" rel="alternate"></link><link href="/feeds/algorithm.atom.xml" rel="self"></link><id>/</id><updated>2021-01-23T00:00:00+09:00</updated><entry><title>Bellman-Ford and systems of difference constraints</title><link href="/bellman-ford-and-systems-of-difference-constraints.html" rel="alternate"></link><published>2021-01-23T00:00:00+09:00</published><updated>2021-01-23T00:00:00+09:00</updated><author><name>Duong Nguyen</name></author><id>tag:None,2021-01-23:/bellman-ford-and-systems-of-difference-constraints.html</id><summary type="html">&lt;h1 id="motivation"&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Bellman-Ford is an algorithm for finding shortest paths from a single source vertex to multiple target vertices in a weighted graph &lt;span class="math"&gt;\(G(V,E)\)&lt;/span&gt; whose edge weights can be negative. The algorithm can also detect negative cycle (if any) in the graph. Its time complexity is &lt;span class="math"&gt;\(O(|V|*|E â€¦&lt;/span&gt;&lt;/p&gt;&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><content type="html">&lt;h1 id="motivation"&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Bellman-Ford is an algorithm for finding shortest paths from a single source vertex to multiple target vertices in a weighted graph &lt;span class="math"&gt;\(G(V,E)\)&lt;/span&gt; whose edge weights can be negative. The algorithm can also detect negative cycle (if any) in the graph. Its time complexity is &lt;span class="math"&gt;\(O(|V|*|E|)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This post is, however, about a lesser-known application of the algorithm, namely solving a system of difference constraints of &lt;span class="math"&gt;\(n\)&lt;/span&gt; variables &lt;span class="math"&gt;\(\{x_i\}_{i=1}^n\)&lt;/span&gt; and &lt;span class="math"&gt;\(m\)&lt;/span&gt; constraints of the form: &lt;span class="math"&gt;\(x_j - x_i \leq w_{ij}\)&lt;/span&gt;, in &lt;span class="math"&gt;\(O(m*n)\)&lt;/span&gt; time complexity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note that this problem can be formulated as &lt;span class="math"&gt;\(A x \leq w\)&lt;/span&gt;, in which &lt;span class="math"&gt;\(x\)&lt;/span&gt; is the &lt;span class="math"&gt;\(n\)&lt;/span&gt;-vector of &lt;span class="math"&gt;\(\{x_1,...x_n\}\)&lt;/span&gt;, &lt;span class="math"&gt;\(w\)&lt;/span&gt; is the &lt;span class="math"&gt;\(m\)&lt;/span&gt;-vector of corresponding constraints, &lt;span class="math"&gt;\(A\)&lt;/span&gt; is a &lt;span class="math"&gt;\(m \times n\)&lt;/span&gt; matrix such that each row contains exactly one 1 and one -1 and 0 otherwise. We need to either find &lt;span class="math"&gt;\(x\)&lt;/span&gt; satisfies the inequality, or report that no solution exists, i.e., the constraints are unsatisfiable!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wait a minute, I want a real-world problem, not a toy, theoretical one! Sure, you can find systems of difference constraints in many practical problems. For example, consider task scheduling with precedence constraints, in which we have &lt;span class="math"&gt;\(n\)&lt;/span&gt; tasks,
- &lt;span class="math"&gt;\(x_i\)&lt;/span&gt; is the starting time of the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; task
- constraints: a task &lt;span class="math"&gt;\(i\)&lt;/span&gt; needs to be finished before starting a task &lt;span class="math"&gt;\(j\)&lt;/span&gt;, i.e., &lt;span class="math"&gt;\(x_i + \text{duration}(i)\leq x_j \Rightarrow x_i - x_j \leq -\text{duration}(u)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Also, it turns out we can find a solution that minimizes the spread of time of all tasks &lt;span class="math"&gt;\(\max_i x_i - \min_i x_i\)&lt;/span&gt; with the algorithm described below. &lt;/p&gt;
&lt;p&gt;Another example is in VLSI layout design, making chip layout as compact as possible while keeping required distances between components for reasonable performance.&lt;/p&gt;
&lt;p&gt;Convinced? So let's dive in!&lt;/p&gt;
&lt;h1 id="observation"&gt;Observation&lt;/h1&gt;
&lt;p&gt;Following are key observations, which suggest surprising connection between the shortest-path problem and the system of difference constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x_j - x_i \leq w_{ij} \Rightarrow x_j \leq x_i + w_{ij}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;recall the relaxation often used in the shortest-path problem, &lt;span class="math"&gt;\(d_i, d_j\)&lt;/span&gt; are the shortest path from the source &lt;span class="math"&gt;\(s\)&lt;/span&gt; to vertices &lt;span class="math"&gt;\(i, j\)&lt;/span&gt; respectively, &lt;span class="math"&gt;\(w_{ij}\)&lt;/span&gt; is the weight of edge &lt;span class="math"&gt;\(i \rightarrow j\)&lt;/span&gt; (assume existed), then &lt;span class="math"&gt;\(d_j \leq d_i + w_{ij}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="constraint-graph"&gt;Constraint graph&lt;/h2&gt;
&lt;p&gt;Let's convert the system of difference constraints into a graph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; vertices corresponding to &lt;span class="math"&gt;\(n\)&lt;/span&gt; variables &lt;span class="math"&gt;\(\{x_i\}_{i=1}^n\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;for each constraint &lt;span class="math"&gt;\(x_j - x_i \leq w_{ij}\)&lt;/span&gt;, add an edge &lt;span class="math"&gt;\(i \rightarrow j\)&lt;/span&gt; with weight &lt;span class="math"&gt;\(w_{ij}\)&lt;/span&gt;. There are &lt;span class="math"&gt;\(m\)&lt;/span&gt; edges in total.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting graph is the constraint graph corresponding to the original system of difference constraints.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim 1&lt;/strong&gt;: If there exists a negative cycle in the constraint graph, then the original system is unsatisfiable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Assume there exists a solution to the original system and a negative cycle &lt;span class="math"&gt;\(x_1 \rightarrow x_2 \rightarrow ... \rightarrow x_k \rightarrow x_1\)&lt;/span&gt;, i.e.,
&lt;span class="math"&gt;\(w_{12} + ... + w_{k1} &amp;lt; 0\)&lt;/span&gt;. However, &lt;span class="math"&gt;\(w_{12} + ... + w_{k1} = x_2 - x_1 + ... + x_1-x_k = 0\)&lt;/span&gt;. This is contradiction, hence Claim 1 is proved.&lt;/p&gt;
&lt;p&gt;Here comes Bellman Ford algorithm, helping us detect if any negative cycle in the constraint graph. If there is, then Claim 1 tells us that the system is unsatisfiable. &lt;/p&gt;
&lt;h2 id="extend-the-constraint-graph"&gt;Extend the constraint graph&lt;/h2&gt;
&lt;p&gt;Here we assume no negative cycle in the constraint graph (judged by Bellman Ford algorithm), then how can we find a solution to the constraint system? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The key idea is to add a new vertex &lt;span class="math"&gt;\(s\)&lt;/span&gt; to the constraint graph and &lt;span class="math"&gt;\(n\)&lt;/span&gt; edges of &lt;strong&gt;weight 0&lt;/strong&gt; from &lt;span class="math"&gt;\(s\)&lt;/span&gt; to all existing vertices. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Adding weight-0 edges to the graph doesn't introduce any negative cycle, and guarantee there are shortest paths from &lt;span class="math"&gt;\(s\)&lt;/span&gt; to all &lt;span class="math"&gt;\(n\)&lt;/span&gt; vertices &lt;span class="math"&gt;\(\{x_i\}_{i=1}^n\)&lt;/span&gt;. Let &lt;span class="math"&gt;\(\{d_i\}_{i=1}^n\)&lt;/span&gt; denote the corresponding shortest distances. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claim 2: &lt;span class="math"&gt;\(\{d_i\}_{i=1}^n\)&lt;/span&gt; satisfies the difference constraints, and thus is a solution of the original system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is mostly obvious given the triangle inequality (aka relaxation constraint) &lt;span class="math"&gt;\(d_j \leq d_i + w_{ij}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h1 id="algorithm"&gt;Algorithm&lt;/h1&gt;
&lt;p&gt;To solve a difference constraint system, we can just:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Construct the corresponding constraint graph, extended with a source vertex &lt;span class="math"&gt;\(s\)&lt;/span&gt; (as mentioned above)&lt;/li&gt;
&lt;li&gt;Then run Bellman-Ford on the resulting graph to obtain shortest distances from &lt;span class="math"&gt;\(s\)&lt;/span&gt; to the remaining vertices&lt;/li&gt;
&lt;li&gt;If a negative cycle is detected, report no solution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The time complexity of this algorithm is &lt;span class="math"&gt;\(O(m*n)\)&lt;/span&gt;, thanks to the Bellman-Ford algorithm. &lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;p&gt;See my &lt;a href="https://github.com/ntduong/Algorithms/blob/master/graph/bf1.cpp"&gt;simple implementation&lt;/a&gt; of the Bellman-Ford algorithm.&lt;/p&gt;
&lt;h2 id="remark"&gt;Remark&lt;/h2&gt;
&lt;p&gt;There are cool properties of the solution found by the Bellman-Ford algorithm, which are worth mentioning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minimizes&lt;/strong&gt; &lt;span class="math"&gt;\(\max_i x_i - \min_i x_i\)&lt;/span&gt;, i.e., it minimizes the &lt;em&gt;spread&lt;/em&gt; of the solution. This is useful, for example, consider the task scheduling problem at the begining. The algorithm essentially minimizes the time to complete all tasks while satisfying all scheduling constraints.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maximize &lt;span class="math"&gt;\(\sum_{i=1}^n x_i\)&lt;/span&gt;&lt;/strong&gt; given addition constraints that &lt;span class="math"&gt;\(x_i \leq 0\)&lt;/span&gt; for all &lt;span class="math"&gt;\(i\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="further-reading"&gt;Further reading&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://courses.csail.mit.edu/6.006/spring11/lectures/lec17.pdf"&gt;MIT lecture notes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Algorithm"></category><category term="graph"></category><category term="linear programming"></category></entry><entry><title>Reservoir Sampling</title><link href="/reservoir-sampling.html" rel="alternate"></link><published>2020-10-31T00:00:00+09:00</published><updated>2020-10-31T00:00:00+09:00</updated><author><name>Duong Nguyen</name></author><id>tag:None,2020-10-31:/reservoir-sampling.html</id><summary type="html">&lt;h1 id="getting-started"&gt;Getting started&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Reservoir_sampling"&gt;Reservoir sampling&lt;/a&gt; concerns with choosing &lt;span class="math"&gt;\(k\)&lt;/span&gt; items (i.e., a random sample of size &lt;span class="math"&gt;\(k\)&lt;/span&gt; or &lt;span class="math"&gt;\(k\)&lt;/span&gt;-sample for short) from a population of size &lt;span class="math"&gt;\(n\)&lt;/span&gt; (&lt;span class="math"&gt;\(n &amp;gt; k\)&lt;/span&gt;) without replacement such that each chosen item is selected randomly with &lt;em&gt;equal chance&lt;/em&gt; from the population. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q1. What is the â€¦&lt;/strong&gt;&lt;/p&gt;&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><content type="html">&lt;h1 id="getting-started"&gt;Getting started&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Reservoir_sampling"&gt;Reservoir sampling&lt;/a&gt; concerns with choosing &lt;span class="math"&gt;\(k\)&lt;/span&gt; items (i.e., a random sample of size &lt;span class="math"&gt;\(k\)&lt;/span&gt; or &lt;span class="math"&gt;\(k\)&lt;/span&gt;-sample for short) from a population of size &lt;span class="math"&gt;\(n\)&lt;/span&gt; (&lt;span class="math"&gt;\(n &amp;gt; k\)&lt;/span&gt;) without replacement such that each chosen item is selected randomly with &lt;em&gt;equal chance&lt;/em&gt; from the population. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q1. What is the probability of an item being selected in the final k-sample?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consider an item &lt;span class="math"&gt;\(x\)&lt;/span&gt; from the population, let &lt;span class="math"&gt;\(P_i(x)\)&lt;/span&gt; denote the probability that &lt;span class="math"&gt;\(x\)&lt;/span&gt; is selected at the i-th round. 
&lt;/p&gt;
&lt;div class="math"&gt;$$P(x~\text{is selected}) = \sum_{i=1}^kP_i(x)$$&lt;/div&gt;
&lt;p&gt;As we sample without replacement, &lt;strong&gt;&lt;span class="math"&gt;\(x\)&lt;/span&gt; is selected at the i-th round&lt;/strong&gt; means &lt;span class="math"&gt;\(x\)&lt;/span&gt; &lt;strong&gt;isn't&lt;/strong&gt; selected in previous (i-1) rounds.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P_1(x) = \frac{1}{n}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P_2(x) = (1-P_1(x)) \times \frac{1}{n-1} = \frac{n-1}{n} \times \frac{1}{n-1} = \frac{1}{n}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P_3(x) = (1-P_1(x)-P_2(x)) \times \frac{1}{n-2} = \frac{1}{n}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\cdots\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P_k(x) = \frac{1}{n}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, &lt;span class="math"&gt;\(P(x~\text{is selected}) = \frac{k}{n}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h1 id="stream-setting"&gt;Stream setting&lt;/h1&gt;
&lt;p&gt;What if the population size is not known in advance as items coming in a stream (which may be infinite) and/or all items can't be stored in memory? Still the requirement is for a new coming item, the chance it is selected in the current sample should be equal to the chances of any item coming before, i.e., if we have seen &lt;span class="math"&gt;\(n\)&lt;/span&gt; items so far then the chance of a seen item being selected in the &lt;span class="math"&gt;\(k\)&lt;/span&gt;-sample is &lt;span class="math"&gt;\(k/n\)&lt;/span&gt;. The first &lt;span class="math"&gt;\(k\)&lt;/span&gt; items are always selected. Here comes the idea of sampling with adaptive probability, which I found very elegant!&lt;/p&gt;
&lt;h2 id="sampling-process"&gt;Sampling process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keep the first &lt;span class="math"&gt;\(k\)&lt;/span&gt; items in our sample&lt;/li&gt;
&lt;li&gt;For the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; item (&lt;span class="math"&gt;\(i \geq k+1\)&lt;/span&gt;), select the item and thus replace an existing item in the current sample with it &lt;strong&gt;with probability &lt;span class="math"&gt;\(p = k/i\)&lt;/span&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-does-it-work"&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;We can prove &lt;strong&gt;by induction&lt;/strong&gt; that at the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; round (&lt;span class="math"&gt;\(i \geq k+1\)&lt;/span&gt;), the probability that a seen item being selected is &lt;span class="math"&gt;\(k/i\)&lt;/span&gt;. Here is the sketch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assume the claim is true at the round &lt;span class="math"&gt;\(i\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new item &lt;span class="math"&gt;\(x_{i+1}\)&lt;/span&gt; comes at the round &lt;span class="math"&gt;\(i+1\)&lt;/span&gt;, we select it into our current sample with &lt;span class="math"&gt;\(p = k/(i+1)\)&lt;/span&gt;. What is the probability &lt;span class="math"&gt;\(p(y)\)&lt;/span&gt; of an existing item &lt;span class="math"&gt;\(y\)&lt;/span&gt; (came in previous rounds) still being selected at this round?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before this round, &lt;span class="math"&gt;\(p_{before}(y) = k/i\)&lt;/span&gt; per the induction assumption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for &lt;span class="math"&gt;\(y\)&lt;/span&gt; still being selected, it needs to survive the round &lt;span class="math"&gt;\(i+1\)&lt;/span&gt;, which is one of the 2 following &lt;strong&gt;exclusive&lt;/strong&gt; cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x_{i+1}\)&lt;/span&gt; is not selected: &lt;span class="math"&gt;\(p_1=(1-\frac{k}{i+1}) = \frac{i+1-k}{i+1}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x_{i+1}\)&lt;/span&gt; is selected but it doesn't replace &lt;span class="math"&gt;\(y\)&lt;/span&gt;: &lt;span class="math"&gt;\(p_2=\frac{k}{i+1} \times \frac{k-1}{k} = \frac{k-1}{i+1}\)&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;thus, &lt;span class="math"&gt;\(p(y) = p_{before}(y) \times (p_1+p_2) = \frac{k}{i} \times \frac{i}{i+1} = k/(i+1)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We just showed that claim is also true at the round &lt;span class="math"&gt;\(i+1\)&lt;/span&gt;. Hence the claim is true for all rounds thanks to the induction principle.&lt;/p&gt;
&lt;h2 id="implementation"&gt;Implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add the first &lt;span class="math"&gt;\(k\)&lt;/span&gt; items to the sample list &lt;span class="math"&gt;\(L\)&lt;/span&gt; in coming order (1-based indexing)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Round &lt;span class="math"&gt;\(i\)&lt;/span&gt;: &lt;span class="math"&gt;\(x_i\)&lt;/span&gt; comes, draw a random integer &lt;span class="math"&gt;\(j \in [1,i]\)&lt;/span&gt;, e.g., &lt;code&gt;random.randint(1, i)&lt;/code&gt; in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if &lt;span class="math"&gt;\(j &amp;lt;= k\)&lt;/span&gt;, replace L[j] with the current item &lt;span class="math"&gt;\(x_i\)&lt;/span&gt;, i.e., &lt;span class="math"&gt;\(L[j] := x_i\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;else skip the current item&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Algorithm"></category><category term="sampling"></category></entry></feed>