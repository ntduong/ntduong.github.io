<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Random Notes - Math</title><link href="/" rel="alternate"></link><link href="/feeds/math.atom.xml" rel="self"></link><id>/</id><updated>2021-02-28T00:00:00+09:00</updated><entry><title>Solving linear equations in modulo world</title><link href="/solving-linear-equations-in-modulo-world.html" rel="alternate"></link><published>2021-02-28T00:00:00+09:00</published><updated>2021-02-28T00:00:00+09:00</updated><author><name>Duong Nguyen</name></author><id>tag:None,2021-02-28:/solving-linear-equations-in-modulo-world.html</id><summary type="html">&lt;h1 id="welcome-to-the-modulo-world"&gt;Welcome to the modulo world&lt;/h1&gt;
&lt;p&gt;Modulo (aka mod) is an important operation in number theory. Given a positive integer &lt;span class="math"&gt;\(m\)&lt;/span&gt; as modulo, an arbitrary integer is &lt;em&gt;mapped&lt;/em&gt; into a number in &lt;span class="math"&gt;\(\mathcal{M} = \{0,1,...m-1\}\)&lt;/span&gt; via modulo operation, &lt;code&gt;a -&amp;gt; a % m&lt;/code&gt; &lt;span class="math"&gt;\(\in \mathcal{M}\)&lt;/span&gt;. More importantly, common arithmetic operations â€¦&lt;/p&gt;&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><content type="html">&lt;h1 id="welcome-to-the-modulo-world"&gt;Welcome to the modulo world&lt;/h1&gt;
&lt;p&gt;Modulo (aka mod) is an important operation in number theory. Given a positive integer &lt;span class="math"&gt;\(m\)&lt;/span&gt; as modulo, an arbitrary integer is &lt;em&gt;mapped&lt;/em&gt; into a number in &lt;span class="math"&gt;\(\mathcal{M} = \{0,1,...m-1\}\)&lt;/span&gt; via modulo operation, &lt;code&gt;a -&amp;gt; a % m&lt;/code&gt; &lt;span class="math"&gt;\(\in \mathcal{M}\)&lt;/span&gt;. More importantly, common arithmetic operations like addition, subtraction, multiplication and division on integer numbers are all well-defined with results in &lt;span class="math"&gt;\(\mathcal{M}\)&lt;/span&gt;, e.g.,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a \pm b) \% m = a \% m + b \% m\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a \times b) \% m = (a \% m) \times (b \% m)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a \div b) \% m = (a \times b^{-1}) \% m\)&lt;/span&gt; (when &lt;span class="math"&gt;\(b^{-1}\)&lt;/span&gt; modulo &lt;span class="math"&gt;\(m\)&lt;/span&gt; exists. More on this below.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two integer &lt;span class="math"&gt;\(a, b\)&lt;/span&gt; are said equivalent in modulo &lt;span class="math"&gt;\(m\)&lt;/span&gt;, &lt;span class="math"&gt;\(a \equiv b \pmod m\)&lt;/span&gt; iff &lt;code&gt;a-b % m = 0&lt;/code&gt;, i.e., &lt;span class="math"&gt;\(m\)&lt;/span&gt; divides &lt;span class="math"&gt;\(a-b\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Built on the basic operations, we can consider more interesting problems such as solving linear equations in modulo world, find &lt;span class="math"&gt;\(x \in \mathbb{Z}\)&lt;/span&gt; such that &lt;span class="math"&gt;\(ax \equiv b \pmod m\)&lt;/span&gt; for given &lt;span class="math"&gt;\(a, b \in \mathbb{Z}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h1 id="a-little-gcd-digression"&gt;A little GCD digression&lt;/h1&gt;
&lt;p&gt;Greatest common divisor (aka, GCD) is another fundamental &lt;em&gt;thing&lt;/em&gt; in number theory. As its name clearly says, &lt;span class="math"&gt;\(\gcd(a, b)\)&lt;/span&gt; is the greatest integer divides both two integers &lt;span class="math"&gt;\(a, b\)&lt;/span&gt;. A simple version of the Euclidean algorithm to find &lt;span class="math"&gt;\(\gcd(a, b)\)&lt;/span&gt; is as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Assume a, b &amp;gt; 0.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While simple, this algorithm is very efficient &lt;code&gt;O(log max(a,b))&lt;/code&gt;. Can you see why?&lt;/p&gt;
&lt;p&gt;An extended version of the algorithm above can also find two integers &lt;span class="math"&gt;\(x, y\)&lt;/span&gt; such that &lt;span class="math"&gt;\(ax + by = gcd(a,b)\)&lt;/span&gt; along with the gcd itself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extgcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# Returns gcd(a,b), x and y in that order.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extgcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# bu + (a%b)v = d&lt;/span&gt;
  &lt;span class="c1"&gt;# bu + (a-(a/b)b)v = d&lt;/span&gt;
  &lt;span class="c1"&gt;# av + b(u-(a/b)v) = d&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hope the inline comments make it clear how &lt;code&gt;extgcd&lt;/code&gt; works. In short, &lt;code&gt;extgcd(a,b)&lt;/code&gt; returns &lt;code&gt;d = gcd(a,b)&lt;/code&gt; and &lt;code&gt;x,y&lt;/code&gt; such that &lt;code&gt;d = ax + by&lt;/code&gt; with the same time complexity &lt;code&gt;O(log max(a,b))&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="mod-inverse"&gt;Mod inverse&lt;/h2&gt;
&lt;p&gt;As alluded above, there is one more thing we need, particularly for division in modulo world. An integer &lt;span class="math"&gt;\(x\)&lt;/span&gt; is the inverse of an integer &lt;span class="math"&gt;\(a\)&lt;/span&gt; modulo &lt;span class="math"&gt;\(m\)&lt;/span&gt; (denoted &lt;span class="math"&gt;\(a^{-1}\)&lt;/span&gt;) iff &lt;span class="math"&gt;\(ax \equiv 1 \pmod m\)&lt;/span&gt;. Does the inverse always exist and if so how to find it? Let's start with some quick observation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ax - 1 = mt&lt;/code&gt; for some &lt;span class="math"&gt;\(t \in \mathbb{Z}\)&lt;/span&gt;, &lt;code&gt;ax - mt = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d = gcd(a,m)&lt;/code&gt; then &lt;code&gt;d&lt;/code&gt; divides 1, i.e., &lt;code&gt;d = 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's now clear that &lt;span class="math"&gt;\(a^{-1}\)&lt;/span&gt; only exists when &lt;code&gt;gcd(a,m) = 1&lt;/code&gt;. And the problem is to find &lt;span class="math"&gt;\(x\)&lt;/span&gt; such that: &lt;code&gt;ax - mt = 1 = gcd(a,m)&lt;/code&gt;. Looks familiar? Yes, it's exactly what &lt;code&gt;extgcd&lt;/code&gt; can find for us, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extgcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="c1"&gt;# Else, report no inverse...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is &lt;code&gt;(m+x%m)%m&lt;/code&gt; doing? It's a little trick to make sure the inverse is in &lt;span class="math"&gt;\(\{0,1,...m-1\}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h1 id="modulo-linear-equation"&gt;Modulo Linear Equation&lt;/h1&gt;
&lt;p&gt;We're now ready to solve our very first linear equation in mod world, given two integers &lt;span class="math"&gt;\(a, b\)&lt;/span&gt; and modulo &lt;span class="math"&gt;\(m\)&lt;/span&gt;, find an integer &lt;span class="math"&gt;\(x\)&lt;/span&gt; such that &lt;/p&gt;
&lt;div class="math"&gt;$$ax \equiv b \pmod{m}$$&lt;/div&gt;
&lt;p&gt;Let's start with quick observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ax - b = mt (1)&lt;/code&gt; for some integer t&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d = gcd(a,m)&lt;/code&gt; then d should divide b; otherwise &lt;span class="math"&gt;\(x\)&lt;/span&gt; doesn't exist and the equation has no solution!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assume d divides b, then divide both sides of (1) by d,&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(a'x-b'=m't\)&lt;/span&gt;, where &lt;span class="math"&gt;\(a'=a/d,b'=b/d,m'=m/d\)&lt;/span&gt; and &lt;span class="math"&gt;\(\gcd(a',m') = 1\)&lt;/span&gt; by the definition of &lt;span class="math"&gt;\(\gcd(a,m)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;From above, we know how to find &lt;span class="math"&gt;\(x\)&lt;/span&gt; such that &lt;span class="math"&gt;\(a'x-m't = 1 = \gcd(a,m)\)&lt;/span&gt;, i.e., &lt;span class="math"&gt;\(x\)&lt;/span&gt; is the inverse of a' modulo m', &lt;span class="math"&gt;\(a'x \equiv 1 \pmod{m'}\)&lt;/span&gt;. So the solution to the original linear equation is:
&lt;/p&gt;
&lt;div class="math"&gt;$$x = a'^{-1} \times b' + m'k \pmod{m}$$&lt;/div&gt;
&lt;p&gt;,
where &lt;span class="math"&gt;\(0 \leq k &amp;lt; \gcd(a,m)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ntduong/Algorithms/blob/master/utils/mod.cpp#L54"&gt;A simple C++ implementation&lt;/a&gt; for reference.&lt;/p&gt;
&lt;h1 id="modulo-linear-equation-system"&gt;Modulo Linear Equation System&lt;/h1&gt;
&lt;p&gt;A next natural challenge is to solve a system of linear equations of the form &lt;span class="math"&gt;\(a_i x \equiv b_i \pmod{m_i}\)&lt;/span&gt; for &lt;span class="math"&gt;\(i=1,...,n\)&lt;/span&gt;. A special case is when &lt;span class="math"&gt;\(a_i = 1\)&lt;/span&gt; for all &lt;span class="math"&gt;\(i=1,...n\)&lt;/span&gt; and &lt;span class="math"&gt;\(\{m_i\}_{i=1}^n\)&lt;/span&gt; are (pairwise) coprime, which is related to the popular &lt;em&gt;Chinese remainder theorem&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As usual, let's start small by considering a system of 2 linear equations. As seen above, an equation of the form &lt;span class="math"&gt;\(ax \equiv b \pmod{m}\)&lt;/span&gt; can always be transformed into the form &lt;span class="math"&gt;\(x \equiv c \pmod{n}\)&lt;/span&gt; (when a solution exists). In practice, we can always add a trivia equation &lt;span class="math"&gt;\(x \equiv 0 \pmod{1}\)&lt;/span&gt;. WLOG, consider the following system of 2 equations:
&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{cases}
&amp;amp;x &amp;amp;\equiv b_1 \pmod{m_1} &amp;amp; (1)\\
&amp;amp;a_2 x &amp;amp;\equiv b_2 \pmod{m_2} &amp;amp; (2)
\end{cases}
$$&lt;/div&gt;
&lt;p&gt;From (1), &lt;span class="math"&gt;\(x = b_1 + tm_1\)&lt;/span&gt; for a integer &lt;span class="math"&gt;\(t\)&lt;/span&gt;. Substitute into (2), &lt;span class="math"&gt;\(a_2(b_1+tm_1) \equiv b_2 \pmod{m_2} \Rightarrow a_2 m_1 t \equiv b_2 - a_2 b_1 \pmod{m_2}~(3)\)&lt;/span&gt;. (3) is a single linear equation for which we already know how to solve from above. Thus, we can solve a system of &lt;span class="math"&gt;\(n\)&lt;/span&gt; equations by iteratively reducing 2 equations to a single equation at a time and eventually solve the last remaining equation!&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/ntduong/Algorithms/blob/master/utils/mod.cpp#L75"&gt;this heavily commented C++ implementation&lt;/a&gt; for reference.&lt;/p&gt;
&lt;h1 id="practice-problems"&gt;Practice Problems&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://atcoder.jp/contests/abc193/tasks/abc193_e&lt;/li&gt;
&lt;li&gt;More to be added in the future...&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Math"></category><category term="number theory"></category><category term="modulo"></category><category term="programming"></category></entry></feed>